/**
 * A.
 * Какие значения становятся "false", в процессе приведения к
 * логическому типу (Boolean)?
 *
 * Запишите значения соответствующих типов в массивы.
 */
/**Я знаю такое правило:
Ложь для JS: false, 0, -0; ''(пустая строка), undefined, null, NaN, все остальное истина.
Значения типа Object оставила пустым, там тоже есть значения которые приведут к false ?
*/
// Значения типа Number, которые при приведении к Boolean станут false
const falseNumberValues = [0, -0];

// Значения типа Object, которые при приведении к Boolean станут false
const falseObjectValues = [];

// Значения типа String, которые при приведении к Boolean станут false
const falseStringValues = [''];

// Другие значения, которые при приведении к Boolean станут false
const otherFalseValues = [NaN, null, undefined];

// B: что выведется на экран и почему?
var text = 'outside';

function logIt() {
  console.log(text);
  var text = 'inside';
};
logIt();
// undefined, переопределение с помощью var в локальной области функции
//потому, что внутри функции локальная переменная названа также как и глобальная вне функции (идет переопределение), но консоль вызвана раньше (до присвоения значения), а если бы она была названа по-другому, то был бы не undefinded, а то значение, что и в глобальной переменной

/**C.
Пока помните, что такое массив давайте немного закрепим.
У массива есть метод .push() который добавляет элемент в конец массива.
* @param {string[]} lines - array of strings
*/

function addLine(lines) {
  lines.push(`Line ${lines.length + 1}`);
}

const mainPageLines = ['Line 1', 'Line 2', 'Line 3'];

addLine(mainPageLines);
addLine(mainPageLines);

// Сколько элементов выведется в консоль? Объясните ваш ответ.
console.log(mainPageLines); // [ 'Line 1', 'Line 2', 'Line 3', 'Line 4', 'Line 5' ]

/** функция addLine добавляет в конец массива mainPageLines еще один элемент 
 * с текстом 'Line' и цифрой, которая высчитывается от длины массива +1. Когда
 * вали функцию первый раз, то она добавила в конец массива элемент 'Line 4' 
 * (так как на тот момент lines.length была 3, то есть 'line' 3+1), а потом 
 * функцию вызвали еще раз, длина у массива была уже 4, и тогда функция 
 * добавила элемент 'Line 5'
*/